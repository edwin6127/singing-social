import { useState } from "react";
import { useLocation } from "wouter";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { useQueryClient, useMutation } from "@tanstack/react-query";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Mic, User, Key, Music } from "lucide-react";

// 验证 Schema
const loginSchema = z.object({
  username: z.string().min(3, "用户名至少需要3个字符"),
  password: z.string().min(6, "密码至少需要6个字符"),
});

const registerSchema = z.object({
  username: z.string().min(3, "用户名至少需要3个字符"),
  displayName: z.string().min(2, "显示名称至少需要2个字符"),
  password: z.string().min(6, "密码至少需要6个字符"),
  confirmPassword: z.string().min(6, "请确认您的密码"),
}).refine(data => data.password === data.confirmPassword, {
  message: "两次输入的密码不匹配",
  path: ["confirmPassword"],
});

type LoginFormValues = z.infer<typeof loginSchema>;
type RegisterFormValues = z.infer<typeof registerSchema>;

export default function DanceAuth() {
  const [, navigate] = useLocation();
  const [activeTab, setActiveTab] = useState<string>("login");
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // 登录表单
  const loginForm = useForm<LoginFormValues>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: "",
      password: "",
    },
  });

  // 注册表单
  const registerForm = useForm<RegisterFormValues>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: "",
      displayName: "",
      password: "",
      confirmPassword: "",
    },
  });

  // 登录请求
  const loginMutation = useMutation({
    mutationFn: async (data: LoginFormValues) => {
      const response = await apiRequest("POST", "/api/auth/login", data);
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });
      toast({
        title: "登录成功",
        description: "欢迎回来！",
      });
      navigate("/");
    },
    onError: (error) => {
      console.error(error);
      toast({
        title: "登录失败",
        description: "请检查您的用户名和密码",
        variant: "destructive",
      });
    },
  });

  // 注册请求
  const registerMutation = useMutation({
    mutationFn: async (data: RegisterFormValues) => {
      const { confirmPassword, ...registerData } = data;
      const response = await apiRequest("POST", "/api/auth/register", registerData);
      return await response.json();
    },
    onSuccess: () => {
      toast({
        title: "注册成功",
        description: "您的账户已创建，请登录",
      });
      setActiveTab("login");
      registerForm.reset();
    },
    onError: (error) => {
      console.error(error);
      toast({
        title: "注册失败",
        description: "可能该用户名已被使用",
        variant: "destructive",
      });
    },
  });

  const onLoginSubmit = (data: LoginFormValues) => {
    loginMutation.mutate(data);
  };

  const onRegisterSubmit = (data: RegisterFormValues) => {
    registerMutation.mutate(data);
  };

  return (
    <div className="min-h-screen bg-black text-white">
      <SimpleHeader />
      
      {/* 舞音社区风格的背景 */}
      <div className="absolute inset-0 overflow-hidden z-0">
        <div className="absolute w-full h-full disco-gradient opacity-10"></div>
        <div className="absolute top-20 -left-20 w-80 h-80 bg-pink-500/20 rounded-full blur-3xl"></div>
        <div className="absolute bottom-20 -right-20 w-80 h-80 bg-blue-500/20 rounded-full blur-3xl"></div>
      </div>
      
      <main className="container mx-auto py-16 px-4 relative z-10">
        <div className="max-w-md mx-auto relative">
          {/* 飘动的音符装饰 */}
          <div className="absolute -top-12 -left-20 text-pink-500 opacity-70 animate-dance-bounce" style={{animationDuration: "2.5s"}}>
            <Music className="h-16 w-16" />
          </div>
          <div className="absolute top-40 -right-16 text-blue-500 opacity-70 animate-dance-bounce" style={{animationDuration: "1.8s", animationDelay: "0.3s"}}>
            <Music className="h-12 w-12" />
          </div>
          <div className="absolute -bottom-8 -left-12 text-purple-500 opacity-70 animate-dance-bounce" style={{animationDuration: "2.2s", animationDelay: "0.6s"}}>
            <Music className="h-10 w-10" />
          </div>
          
          <div className="text-center mb-10">
            <h1 className="text-5xl font-bold mb-4 animate-neon-pulse bg-clip-text text-transparent bg-gradient-to-r from-pink-500 via-purple-500 to-blue-500">
              舞音社区
            </h1>
            <p className="text-xl text-gray-300">
              以歌会友，连接音乐灵魂
            </p>
          </div>
          
          <Card className="border-0 shadow-xl bg-gray-900/80 backdrop-blur-sm overflow-hidden relative">
            {/* 顶部彩色条 */}
            <div className="h-2 disco-gradient"></div>
            
            {/* 霓虹灯效果 */}
            <div className="absolute top-0 left-0 w-full h-full border-2 border-purple-500/30 rounded-lg animate-neon-pulse"></div>
            
            <CardHeader className="relative z-10">
              <div className="flex justify-center mb-4">
                <div className="w-20 h-20 rounded-full disco-gradient flex items-center justify-center p-1">
                  <div className="w-full h-full rounded-full bg-gray-900 flex items-center justify-center">
                    <Mic className="h-10 w-10 text-white animate-dance-shake" />
                  </div>
                </div>
              </div>
            </CardHeader>
            
            <CardContent className="relative z-10">
              <Tabs defaultValue="login" value={activeTab} onValueChange={setActiveTab} className="w-full">
                <TabsList className="grid w-full grid-cols-2 bg-gray-800">
                  <TabsTrigger 
                    value="login" 
                    className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-pink-600 data-[state=active]:to-purple-600 data-[state=active]:text-white"
                  >
                    登录
                  </TabsTrigger>
                  <TabsTrigger 
                    value="register" 
                    className="data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-600 data-[state=active]:to-purple-600 data-[state=active]:text-white"
                  >
                    注册
                  </TabsTrigger>
                </TabsList>
                
                <div className="mt-4">
                  <TabsContent value="login">
                    <Form {...loginForm}>
                      <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className="space-y-4">
                        <FormField
                          control={loginForm.control}
                          name="username"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">用户名</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-pink-400 h-4 w-4" />
                                  <Input
                                    placeholder="输入您的用户名"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-pink-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={loginForm.control}
                          name="password"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">密码</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 text-pink-400 h-4 w-4" />
                                  <Input
                                    type="password"
                                    placeholder="输入您的密码"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-pink-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <Button
                          type="submit"
                          className="w-full bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-500 hover:to-purple-500 transition-all animate-neon-pulse"
                          disabled={loginMutation.isPending}
                        >
                          {loginMutation.isPending ? "登录中..." : "登录"}
                        </Button>
                      </form>
                    </Form>
                  </TabsContent>
                  
                  <TabsContent value="register">
                    <Form {...registerForm}>
                      <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className="space-y-4">
                        <FormField
                          control={registerForm.control}
                          name="username"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">用户名</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 h-4 w-4" />
                                  <Input
                                    placeholder="选择一个用户名"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-blue-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={registerForm.control}
                          name="displayName"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">显示名称</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <User className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 h-4 w-4" />
                                  <Input
                                    placeholder="您希望如何被称呼"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-blue-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={registerForm.control}
                          name="password"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">密码</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 h-4 w-4" />
                                  <Input
                                    type="password"
                                    placeholder="创建一个密码"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-blue-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <FormField
                          control={registerForm.control}
                          name="confirmPassword"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel className="text-gray-200">确认密码</FormLabel>
                              <FormControl>
                                <div className="relative">
                                  <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-400 h-4 w-4" />
                                  <Input
                                    type="password"
                                    placeholder="再次输入您的密码"
                                    className="pl-10 bg-gray-800 border-gray-700 text-white focus-visible:ring-blue-500"
                                    {...field}
                                  />
                                </div>
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        
                        <Button
                          type="submit"
                          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-500 hover:to-purple-500 transition-all animate-neon-pulse"
                          disabled={registerMutation.isPending}
                        >
                          {registerMutation.isPending ? "注册中..." : "注册"}
                        </Button>
                      </form>
                    </Form>
                  </TabsContent>
                </div>
              </Tabs>
            </CardContent>
            
            <CardFooter className="flex flex-col space-y-4 pt-0 relative z-10">
              <div className="text-center text-sm text-gray-300">
                {activeTab === "login" ? "没有账号？" : "已有账号？"}
                <Button 
                  variant="link" 
                  className="p-0 h-auto text-pink-400 hover:text-pink-300"
                  onClick={() => setActiveTab(activeTab === "login" ? "register" : "login")}
                >
                  {activeTab === "login" ? "立即注册" : "去登录"}
                </Button>
              </div>
            </CardFooter>
          </Card>
          
          {/* 舞蹈元素 */}
          <div className="mt-16 flex justify-center">
            <div className="flex items-end space-x-1 h-16">
              {Array.from({length: 20}).map((_, i) => (
                <div 
                  key={i} 
                  className="w-2 rounded-full animate-music-bar"
                  style={{
                    height: `${Math.abs(Math.sin(i * 0.5) * 2.5) + 0.5}rem`,
                    backgroundColor: `hsl(${(i * 15) % 360}, 100%, 70%)`,
                    animationDelay: `${i * 0.05}s`,
                    animationDuration: `${0.5 + (i % 5) * 0.1}s`
                  }}
                ></div>
              ))}
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}